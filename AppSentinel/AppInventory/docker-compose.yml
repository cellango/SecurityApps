version: '3.8'

services:
  frontend:
    container_name: appinventory-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:5000/api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:5000/api
    networks:
      - appinventory-network
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      - backend

  backend:
    container_name: appinventory-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
    environment:
      - FLASK_APP=app
      - FLASK_ENV=development
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=appinventory-db
      - DB_PORT=5432
      - DB_NAME=appinventory
      - SECRET_KEY=your-secret-key-here
      - JWT_SECRET_KEY=your-jwt-secret-key-here
      - CORS_ORIGINS=http://localhost:3000
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:postgres@appinventory-db:5432/appinventory
    networks:
      - appinventory-network
    depends_on:
      - appinventory-db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  celery_worker:
    container_name: appinventory-celery-worker
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint: ["/app/celery_entrypoint.sh"]
    volumes:
      - ./backend:/app
    environment:
      - FLASK_APP=app
      - FLASK_ENV=development
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=appinventory-db
      - DB_PORT=5432
      - DB_NAME=appinventory
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:postgres@appinventory-db:5432/appinventory
    networks:
      - appinventory-network
    depends_on:
      - redis
      - appinventory-db
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.celery_app.celery_app inspect ping -d celery@$$HOSTNAME || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  celery_beat:
    container_name: appinventory-celery-beat
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint: ["/app/celery_beat_entrypoint.sh"]
    volumes:
      - ./backend:/app
    environment:
      - FLASK_APP=app
      - FLASK_ENV=development
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:postgres@appinventory-db:5432/appinventory
    networks:
      - appinventory-network
    depends_on:
      - redis
      - celery_worker
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.celery_app.celery_app inspect ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  flower:
    container_name: appinventory-flower
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint: ["/app/flower_entrypoint.sh"]
    ports:
      - "5555:5555"
    environment:
      - FLASK_APP=app
      - FLASK_ENV=development
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:postgres@appinventory-db:5432/appinventory
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_UNAUTHENTICATED_API=true
    networks:
      - appinventory-network
    depends_on:
      - redis
      - celery_worker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/api/workers"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  redis:
    container_name: appinventory-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - appinventory-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  appinventory-db:
    container_name: appinventory-db
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=appinventory
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - appinventory-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  appinventory-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
