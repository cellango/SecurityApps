import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  MenuItem,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  IconButton,
  Typography,
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';

const severityColors = {
  CRITICAL: '#d32f2f',
  HIGH: '#f44336',
  MEDIUM: '#ff9800',
  LOW: '#4caf50',
  INFO: '#2196f3',
};

const severityOptions = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'INFO'];
const statusOptions = ['OPEN', 'IN_PROGRESS', 'FIXED'];

function VulnerabilityManager({ vulnerabilities, onAddVulnerability, onUpdateVulnerability }) {
  const [openDialog, setOpenDialog] = useState(false);
  const [editingVuln, setEditingVuln] = useState(null);
  const [vulnData, setVulnData] = useState({
    title: '',
    description: '',
    severity: 'MEDIUM',
    status: 'OPEN',
  });

  const handleOpenDialog = (vuln = null) => {
    if (vuln) {
      setEditingVuln(vuln);
      setVulnData({
        title: vuln.title,
        description: vuln.description,
        severity: vuln.severity,
        status: vuln.status,
      });
    } else {
      setEditingVuln(null);
      setVulnData({
        title: '',
        description: '',
        severity: 'MEDIUM',
        status: 'OPEN',
      });
    }
    setOpenDialog(true);
  };

  const handleClose = () => {
    setOpenDialog(false);
    setEditingVuln(null);
  };

  const handleSubmit = () => {
    if (editingVuln) {
      onUpdateVulnerability(editingVuln.id, vulnData);
    } else {
      onAddVulnerability(vulnData);
    }
    handleClose();
  };

  return (
    <div>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
        <Typography variant="h6">Vulnerabilities</Typography>
        <Button variant="contained" color="primary" onClick={() => handleOpenDialog()}>
          Add Vulnerability
        </Button>
      </div>

      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Title</TableCell>
              <TableCell>Severity</TableCell>
              <TableCell>Status</TableCell>
              <TableCell>Description</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {vulnerabilities.map((vuln) => (
              <TableRow key={vuln.id}>
                <TableCell>{vuln.title}</TableCell>
                <TableCell>
                  <Chip
                    label={vuln.severity}
                    style={{
                      backgroundColor: severityColors[vuln.severity],
                      color: 'white',
                    }}
                  />
                </TableCell>
                <TableCell>
                  <Chip label={vuln.status} />
                </TableCell>
                <TableCell>{vuln.description}</TableCell>
                <TableCell>
                  <IconButton onClick={() => handleOpenDialog(vuln)}>
                    <EditIcon />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      <Dialog open={openDialog} onClose={handleClose} maxWidth="md" fullWidth>
        <DialogTitle>
          {editingVuln ? 'Edit Vulnerability' : 'Add New Vulnerability'}
        </DialogTitle>
        <DialogContent>
          <TextField
            label="Title"
            value={vulnData.title}
            onChange={(e) => setVulnData({ ...vulnData, title: e.target.value })}
            fullWidth
            margin="normal"
            required
          />
          <TextField
            label="Description"
            value={vulnData.description}
            onChange={(e) =>
              setVulnData({ ...vulnData, description: e.target.value })
            }
            fullWidth
            margin="normal"
            multiline
            rows={4}
          />
          <TextField
            select
            label="Severity"
            value={vulnData.severity}
            onChange={(e) =>
              setVulnData({ ...vulnData, severity: e.target.value })
            }
            fullWidth
            margin="normal"
          >
            {severityOptions.map((option) => (
              <MenuItem key={option} value={option}>
                {option}
              </MenuItem>
            ))}
          </TextField>
          <TextField
            select
            label="Status"
            value={vulnData.status}
            onChange={(e) => setVulnData({ ...vulnData, status: e.target.value })}
            fullWidth
            margin="normal"
          >
            {statusOptions.map((option) => (
              <MenuItem key={option} value={option}>
                {option}
              </MenuItem>
            ))}
          </TextField>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button onClick={handleSubmit} color="primary">
            {editingVuln ? 'Update' : 'Add'}
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
}

export default VulnerabilityManager;
