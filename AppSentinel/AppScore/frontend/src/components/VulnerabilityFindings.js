import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  CircularProgress,
  Alert,
} from '@mui/material';
import api from '../services/api';

function VulnerabilityFindings({ applicationId }) {
  const [findings, setFindings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchVulnerabilities = async () => {
      try {
        const response = await api.get(`/api/applications/${applicationId}/vulnerabilities`);
        setFindings(response.data);
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchVulnerabilities();
  }, [applicationId]);

  const getSeverityColor = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'critical':
        return '#d32f2f';
      case 'high':
        return '#f44336';
      case 'medium':
        return '#ff9800';
      case 'low':
        return '#4caf50';
      case 'info':
        return '#2196f3';
      default:
        return '#757575';
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" my={4}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error" sx={{ mb: 3 }}>
        Error loading vulnerability findings: {error}
      </Alert>
    );
  }

  return (
    <Box>
      <Typography variant="h6" gutterBottom>
        Vulnerability Findings
      </Typography>
      
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Plugin ID</TableCell>
              <TableCell>Name</TableCell>
              <TableCell>Severity</TableCell>
              <TableCell>CVSS Score</TableCell>
              <TableCell>First Found</TableCell>
              <TableCell>Last Found</TableCell>
              <TableCell>Status</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {findings.map((finding) => (
              <TableRow key={finding.id} hover>
                <TableCell>{finding.plugin_id}</TableCell>
                <TableCell>{finding.name}</TableCell>
                <TableCell>
                  <Chip
                    label={finding.severity}
                    size="small"
                    sx={{
                      backgroundColor: getSeverityColor(finding.severity),
                      color: 'white',
                    }}
                  />
                </TableCell>
                <TableCell>{finding.cvss_score}</TableCell>
                <TableCell>
                  {new Date(finding.first_found).toLocaleDateString()}
                </TableCell>
                <TableCell>
                  {new Date(finding.last_found).toLocaleDateString()}
                </TableCell>
                <TableCell>
                  <Chip
                    label={finding.status}
                    size="small"
                    color={finding.status === 'Open' ? 'error' : 'success'}
                  />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Box>
  );
}

export default VulnerabilityFindings;
