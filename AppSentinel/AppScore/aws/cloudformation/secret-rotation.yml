AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Security Score Card secret rotation setup'

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - staging
    Description: Environment name

  SecretRotationSchedule:
    Type: String
    Default: rate(30 days)
    Description: Schedule for secret rotation

Resources:
  # IAM Role for Lambda function
  SecretRotationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretRotationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecretVersionStage
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/security-score-card/*
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: '*'

  # Lambda Function for Secret Rotation
  SecretRotationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: rotate_secrets.lambda_handler
      Role: !GetAtt SecretRotationRole.Arn
      Code:
        S3Bucket: !Sub ${AWS::AccountId}-lambda-functions
        S3Key: rotate_secrets.zip
      Runtime: python3.8
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          DB_HOST: !Sub '{{resolve:secretsmanager:${Environment}/security-score-card/db-host}}'
          DB_PORT: '5432'
          DB_NAME: security_score_card
          DB_USER: !Sub '{{resolve:secretsmanager:${Environment}/security-score-card/db-user}}'

  # Rotation Schedule for Database Password
  DatabasePasswordRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}/security-score-card/db-password
      RotationLambdaARN: !GetAtt SecretRotationFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 30

  # Rotation Schedule for JWT Secret Key
  JWTSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}/security-score-card/jwt-secret-key
      RotationLambdaARN: !GetAtt SecretRotationFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 30

  # Rotation Schedule for Application Secret Key
  AppSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}/security-score-card/secret-key
      RotationLambdaARN: !GetAtt SecretRotationFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 30

  # CloudWatch Log Group for Lambda Function
  SecretRotationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SecretRotationFunction}
      RetentionInDays: 30

Outputs:
  RotationFunctionArn:
    Description: ARN of the secret rotation Lambda function
    Value: !GetAtt SecretRotationFunction.Arn

  RotationFunctionRole:
    Description: IAM role used by the rotation function
    Value: !GetAtt SecretRotationRole.Arn
