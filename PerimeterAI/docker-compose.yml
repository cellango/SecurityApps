services:
  signature:
    build:
      context: ./perimeterai-signature
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
      - "8443:8443"
    environment:
      - DATABASE_JDBC_URL=jdbc:postgresql://postgres:5432/perimeterai
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=perimeter123
      - TLS_SETUP_ENABLED=true
      - EJBCA_ADMIN_USERNAME=superadmin
      - EJBCA_ADMIN_PASSWORD=ejbca
      - SPRING_PROFILES_ACTIVE=development
      - KEYCLOAK_AUTH_SERVER_URL=http://keycloak:8081/auth
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
    networks:
      - perimeter-network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    command: ["start-dev", "--http-port=8081"]
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/perimeterai
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=perimeter123
      - KC_HOSTNAME_ADMIN_URL=http://localhost:8081
      - KC_HOSTNAME_URL=http://localhost:8081
      - KC_HTTP_ENABLED=true
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8081/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - perimeter-network

  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=perimeter123
      - POSTGRES_MULTIPLE_DATABASES=perimeterai,keycloak
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - perimeter-network

  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./perimeter-monitoring/prometheus/config:/etc/prometheus
      - ./data/prometheus:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - perimeter-network

  grafana:
    image: grafana/grafana:10.0.0
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./data/grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - perimeter-network

  node-exporter:
    image: prom/node-exporter:v1.6.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - perimeter-network

  keyboard-dynamics-backend:
    build:
      context: ./perimeterai-keyboard-dynamics/services/analytics
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=perimeter123
      - DB_NAME=perimeterai
      - REDIS_URL=redis://redis:6379/0
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - perimeter-network

  keyboard-dynamics-frontend:
    build:
      context: ./perimeterai-keyboard-dynamics/frontend
      dockerfile: Dockerfile
    ports:
      - "3001:80"
    environment:
      - REACT_APP_API_URL=http://localhost:5001/api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      keyboard-dynamics-backend:
        condition: service_healthy
    networks:
      - perimeter-network

  keyboard-dynamics:
    build:
      context: ./perimeterai-keyboard-dynamics/services/analytics
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:perimeter123@postgres:5432/perimeterai
      - REDIS_URL=redis://redis:6379/0
      - AUTH_SERVICE_URL=http://keyboard-dynamics-auth:4000
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - perimeter-network

  keyboard-dynamics-auth:
    build:
      context: ./perimeterai-keyboard-dynamics/services/auth
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DATABASE_URL=postgresql://postgres:perimeter123@postgres:5432/perimeterai
      - REDIS_URL=redis://redis:6379/1
      - JWT_SECRET=your-secret-key
      - KEYCLOAK_URL=http://keycloak:8081/auth
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - perimeter-network

  keyboard-dynamics-collector:
    build:
      context: ./perimeterai-keyboard-dynamics/services/collector
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - ANALYTICS_SERVICE_URL=http://keyboard-dynamics:5000
      - AUTH_SERVICE_URL=http://keyboard-dynamics-auth:4000
      - REDIS_URL=redis://redis:6379/2
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      - keyboard-dynamics
      - keyboard-dynamics-auth
      - redis
    networks:
      - perimeter-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - perimeter-network

volumes:
  postgres_data:

networks:
  perimeter-network:
    driver: bridge
