services:
  analytics:
    build: 
      context: ./services/analytics
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=${EXTERNAL_DB_URL:-postgresql://postgres:perimeter123@postgres:5432/keyboard_dynamics}
      - REDIS_URL=redis://redis:6379/0
      - AUTH_SERVICE_URL=http://auth:4000
    depends_on:
      - ${DB_SERVICE:-postgres}
      - redis
    networks:
      - perimeterai-network

  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - DATABASE_URL=${EXTERNAL_DB_URL:-postgresql://postgres:perimeter123@postgres:5432/keyboard_dynamics}
      - REDIS_URL=redis://redis:6379/1
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - KEYCLOAK_URL=${KEYCLOAK_URL:-http://perimeterai-keycloak:8081/auth}
    depends_on:
      - ${DB_SERVICE:-postgres}
      - redis
    networks:
      - perimeterai-network

  collector:
    build:
      context: ./services/collector
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - ANALYTICS_SERVICE_URL=http://analytics:5000
      - AUTH_SERVICE_URL=http://auth:4000
      - REDIS_URL=redis://redis:6379/2
    depends_on:
      - analytics
      - auth
      - redis
    networks:
      - perimeterai-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8083:80"
    environment:
      - API_URL=http://collector:3000
    depends_on:
      - collector
    networks:
      - perimeterai-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - perimeterai-network

  postgres:
    profiles: ["standalone"]
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=perimeter123
      - POSTGRES_DB=keyboard_dynamics
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - perimeterai-network

networks:
  perimeterai-network:

volumes:
  postgres_data: